name: Build & Release mesh-networking .deb

on:
  push:
    branches: [main]
  release:
    types: [published]

jobs:
  update-release-notes:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v3
      
      - name: Generate release notes
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-deb:
    runs-on: ubuntu-latest
    env:
      PACKAGE_NAME: mesh-networking
      BUILD_DIR: build/mesh-networking

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up build environment
        run: |
          # Install required packages with proper flags
          sudo apt-get update -y
          sudo apt-get install -y dpkg-dev fakeroot lintian shellcheck
          
          # Create build directory structure
          mkdir -p ${{ env.BUILD_DIR }}/{DEBIAN,usr/local/bin,etc/{frr,systemd/system,logrotate.d},usr/share/${{ env.PACKAGE_NAME }}}

      - name: Copy package files
        run: |
          # Copy control scripts with error handling
          cp -v mesh-networking-deb/DEBIAN/control ${{ env.BUILD_DIR }}/DEBIAN/ || { echo "Error: Failed to copy control file"; exit 1; }
          
          # Copy postinst/prerm with fallback
          cp -v mesh-networking-deb/DEBIAN/postinst ${{ env.BUILD_DIR }}/DEBIAN/ 2>/dev/null || touch ${{ env.BUILD_DIR }}/DEBIAN/postinst
          cp -v mesh-networking-deb/DEBIAN/prerm ${{ env.BUILD_DIR }}/DEBIAN/ 2>/dev/null || touch ${{ env.BUILD_DIR }}/DEBIAN/prerm
          
          # Set permissions
          chmod 755 ${{ env.BUILD_DIR }}/DEBIAN/{postinst,prerm}

          # Copy main script
          cp -v mesh-networking-deb/usr/local/bin/mesh-network-gen ${{ env.BUILD_DIR }}/usr/local/bin/ || { echo "Error: Failed to copy main script"; exit 1; }
          chmod 755 ${{ env.BUILD_DIR }}/usr/local/bin/mesh-network-gen

          # Copy systemd service
          cp -v mesh-networking-deb/etc/systemd/system/mesh-networking.service ${{ env.BUILD_DIR }}/etc/systemd/system/ || { echo "Error: Failed to copy systemd service"; exit 1; }

          # Copy documentation with fallback
          cp -v mesh-networking-deb/usr/share/mesh-networking/README.md ${{ env.BUILD_DIR }}/usr/share/${{ env.PACKAGE_NAME }}/ 2>/dev/null || true
          cp -v mesh-networking-deb/CHANGELOG.md ${{ env.BUILD_DIR }}/usr/share/${{ env.PACKAGE_NAME }}/ 2>/dev/null || true

          # Create logrotate config
          echo "/var/log/mesh-network-gen.log {" > ${{ env.BUILD_DIR }}/etc/logrotate.d/mesh-networking
          echo "    weekly" >> ${{ env.BUILD_DIR }}/etc/logrotate.d/mesh-networking
          echo "    rotate 4" >> ${{ env.BUILD_DIR }}/etc/logrotate.d/mesh-networking
          echo "    compress" >> ${{ env.BUILD_DIR }}/etc/logrotate.d/mesh-networking
          echo "    delaycompress" >> ${{ env.BUILD_DIR }}/etc/logrotate.d/mesh-networking
          echo "    missingok" >> ${{ env.BUILD_DIR }}/etc/logrotate.d/mesh-networking
          echo "    notifempty" >> ${{ env.BUILD_DIR }}/etc/logrotate.d/mesh-networking
          echo "    create 644 root root" >> ${{ env.BUILD_DIR }}/etc/logrotate.d/mesh-networking
          echo "}" >> ${{ env.BUILD_DIR }}/etc/logrotate.d/mesh-networking

      - name: Set version from tag or default
        id: version
        run: |
          # Extract version from tag or use timestamp
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            # Remove 'v' prefix if present
            VERSION=${VERSION#v}
          else
            VERSION="dev-$(date +%Y%m%d%H%M)"
          fi
          
          # Set version in environment
          echo "version=${VERSION}" >> "${GITHUB_ENV}"
          echo "Package version: ${VERSION}"

      - name: Update control file
        run: |
          # Update version in control file
          sed -i "s/^Version:.*/Version: ${{ env.version }}/" ${{ env.BUILD_DIR }}/DEBIAN/control
          
          # Add Pre-Depends if not present
          if ! grep -q "^Pre-Depends:" ${{ env.BUILD_DIR }}/DEBIAN/control; then
            sed -i '/^Depends:/i Pre-Depends: bash, systemd' ${{ env.BUILD_DIR }}/DEBIAN/control
          fi
          
          # Ensure Depends includes required packages
          if ! grep -q "openvswitch-switch" ${{ env.BUILD_DIR }}/DEBIAN/control; then
            sed -i 's/^Depends:/Depends: openvswitch-switch, frr, iproute2/' ${{ env.BUILD_DIR }}/DEBIAN/control
          fi

      - name: Inject version into script
        run: |
          # Update version in main script
          sed -i "s/VERSION=\${VERSION:-unknown}/VERSION=${{ env.version }}/" ${{ env.BUILD_DIR }}/usr/local/bin/mesh-network-gen
          
          # Create VERSION metadata file
          echo "${{ env.version }}" > ${{ env.BUILD_DIR }}/usr/share/${{ env.PACKAGE_NAME }}/VERSION

      - name: Validate package
        run: |
          # Lint script with shellcheck
          shellcheck ${{ env.BUILD_DIR }}/usr/local/bin/mesh-network-gen || echo "Shellcheck found issues but continuing"
          
          # Validate package with lintian
          lintian ${{ env.BUILD_DIR }} || echo "Lintian found issues but continuing"

      - name: Build .deb package
        run: |
          # Build the package
          dpkg-deb --build ${{ env.BUILD_DIR }}
          
          # Rename with version
          mv ${{ env.BUILD_DIR }}.deb ${{ env.PACKAGE_NAME }}_${{ env.version }}_all.deb
          
          # Create symlink for latest version
          ln -sf ${{ env.PACKAGE_NAME }}_${{ env.version }}_all.deb ${{ env.PACKAGE_NAME }}_all.deb
          
          # List the built package
          ls -la *.deb

      - name: Upload .deb to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.PACKAGE_NAME }}_${{ env.version }}_all.deb
            ${{ env.PACKAGE_NAME }}_all.deb
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Mesh Networking for Proxmox VE ${{ env.version }}
            
            This release includes:
            - Full mesh networking setup for Proxmox VE clusters
            - Open vSwitch integration with RSTP
            - FRR OpenFabric routing
            - Automated configuration tools

      - name: Commit .deb to releases folder
        if: github.event_name != 'release'
        run: |
          mkdir -p releases
          cp ${{ env.PACKAGE_NAME }}_${{ env.version }}_all.deb releases/
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add releases/
          git commit -m "Add build ${{ env.version }}"
          git push 